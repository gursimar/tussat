
interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000039  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000009a  00000000  00000000  000001a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000003f  00000000  00000000  00000243  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000016e  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000085  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6d 00 	call	0xda	; 0xda <main>
  8a:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
#include<util/delay.h>
#include<compat/deprecated.h>
#include<avr/interrupt.h>
#define ECPU 12000000UL
ISR(INT0_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
sbi(PORTC,PIN7);
  9c:	af 9a       	sbi	0x15, 7	; 21
sbi(PORTC,PIN6);
  9e:	ae 9a       	sbi	0x15, 6	; 21
sbi(PORTC,PIN5);
  a0:	ad 9a       	sbi	0x15, 5	; 21
sbi(PORTC,PIN4);
  a2:	ac 9a       	sbi	0x15, 4	; 21
cbi(PORTC,PIN7);
  a4:	af 98       	cbi	0x15, 7	; 21
cbi(PORTC,PIN6);
  a6:	ae 98       	cbi	0x15, 6	; 21
cbi(PORTC,PIN5);
  a8:	ad 98       	cbi	0x15, 5	; 21
cbi(PORTC,PIN4);
  aa:	ac 98       	cbi	0x15, 4	; 21
}
  ac:	0f 90       	pop	r0
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	0f 90       	pop	r0
  b2:	1f 90       	pop	r1
  b4:	18 95       	reti

000000b6 <__vector_2>:

ISR(INT1_vect)
{
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
sbi(PORTC,PIN7);
  c0:	af 9a       	sbi	0x15, 7	; 21
sbi(PORTC,PIN6);
  c2:	ae 9a       	sbi	0x15, 6	; 21
sbi(PORTC,PIN5);
  c4:	ad 9a       	sbi	0x15, 5	; 21
sbi(PORTC,PIN4);
  c6:	ac 9a       	sbi	0x15, 4	; 21
cbi(PORTC,PIN7);
  c8:	af 98       	cbi	0x15, 7	; 21
cbi(PORTC,PIN6);
  ca:	ae 98       	cbi	0x15, 6	; 21
cbi(PORTC,PIN5);
  cc:	ad 98       	cbi	0x15, 5	; 21
cbi(PORTC,PIN4);
  ce:	ac 98       	cbi	0x15, 4	; 21
}
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <main>:
void main(void)
{
while(1)
{

DDRC=0XFF;
  da:	4f ef       	ldi	r20, 0xFF	; 255
DDRA=0X00;
if(bit_is_set(PINA,6))
{
PORTC=0b00000011;
  dc:	33 e0       	ldi	r19, 0x03	; 3

}
if(bit_is_clear(PINA,6))
{
PORTC=0b00001100;
  de:	2c e0       	ldi	r18, 0x0C	; 12

}
GICR=0XC0;
  e0:	90 ec       	ldi	r25, 0xC0	; 192
MCUCR=0X0E;
  e2:	8e e0       	ldi	r24, 0x0E	; 14
void main(void)
{
while(1)
{

DDRC=0XFF;
  e4:	44 bb       	out	0x14, r20	; 20
DDRA=0X00;
  e6:	1a ba       	out	0x1a, r1	; 26
if(bit_is_set(PINA,6))
  e8:	ce 99       	sbic	0x19, 6	; 25
{
PORTC=0b00000011;
  ea:	35 bb       	out	0x15, r19	; 21

}
if(bit_is_clear(PINA,6))
  ec:	ce 9b       	sbis	0x19, 6	; 25
{
PORTC=0b00001100;
  ee:	25 bb       	out	0x15, r18	; 21

}
GICR=0XC0;
  f0:	9b bf       	out	0x3b, r25	; 59
MCUCR=0X0E;
  f2:	85 bf       	out	0x35, r24	; 53
sei();
  f4:	78 94       	sei
  f6:	f6 cf       	rjmp	.-20     	; 0xe4 <main+0xa>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
