
EXPERIMENT_GCC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800060  00800060  00000184  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000044  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000f9  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000b9  00000000  00000000  000002e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000014a  00000000  00000000  0000039a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000004e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000b3  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  8a:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_3>:
unsigned int y=0; 

// this function gets now called in 20Hz intervals

ISR(TIMER2_COMP_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
        cnt2step++;
  a0:	80 91 64 00 	lds	r24, 0x0064
  a4:	8f 5f       	subi	r24, 0xFF	; 255
  a6:	80 93 64 00 	sts	0x0064, r24
        X=PORTB4;
  aa:	84 e0       	ldi	r24, 0x04	; 4
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	90 93 61 00 	sts	0x0061, r25
  b2:	80 93 60 00 	sts	0x0060, r24
		if (cnt2step>=10)
  b6:	80 91 64 00 	lds	r24, 0x0064
  ba:	8a 30       	cpi	r24, 0x0A	; 10
  bc:	40 f0       	brcs	.+16     	; 0xce <__vector_3+0x3c>
		{
                if (PORTC&(1<<PORTC5))
  be:	ad 9b       	sbis	0x15, 5	; 21
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <__vector_3+0x34>
				{
                        //LEDON;
						PORTC=0b00000000;
  c2:	15 ba       	out	0x15, r1	; 21
  c4:	02 c0       	rjmp	.+4      	; 0xca <__vector_3+0x38>
                }
				
				else
				{
                        PORTC=0b00100000;
  c6:	80 e2       	ldi	r24, 0x20	; 32
  c8:	85 bb       	out	0x15, r24	; 21
                }
                
				cnt2step=0;
  ca:	10 92 64 00 	sts	0x0064, r1
        }
}
  ce:	9f 91       	pop	r25
  d0:	8f 91       	pop	r24
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <init_cnt2>:

/* setup timer T2 as an interrupt generating time base.
* You must call once sei() in the main program */
void init_cnt2(void)
{
        cnt2step=0;
  dc:	10 92 64 00 	sts	0x0064, r1
        TIMSK=(1<<OCIE2); // compare match on OCR2
  e0:	80 e8       	ldi	r24, 0x80	; 128
  e2:	89 bf       	out	0x39, r24	; 57
        TCNT2=0;  // init counter
  e4:	14 bc       	out	0x24, r1	; 36
        OCR2=250;//195; // value to compare against 3906Hz/195=20Hz
  e6:	8a ef       	ldi	r24, 0xFA	; 250
  e8:	83 bd       	out	0x23, r24	; 35
        //TCCR2=(1<<WGM21);
        // divide clock by 256: 1MHz/256=3906.25Hz
        // clock divider, start counter (or with WGM21 setting):
//        TCCR2|=(1<<CS02)|(1<<CS01)|(0<<CS00);

		TCCR2|=(1<<CS02)|(1<<CS01)|(1<<CS00); //1024
  ea:	85 b5       	in	r24, 0x25	; 37
  ec:	87 60       	ori	r24, 0x07	; 7
  ee:	85 bd       	out	0x25, r24	; 37
		//no prescaling
		//TCCR2|=(0<<CS02)|(0<<CS01)|(1<<CS00); //no prescaling
		
}
  f0:	08 95       	ret

000000f2 <main>:
int main(void)
{
        //LED_INIT;
        //LEDOFF;
		
		PORTC=0;
  f2:	15 ba       	out	0x15, r1	; 21

/* setup timer T2 as an interrupt generating time base.
* You must call once sei() in the main program */
void init_cnt2(void)
{
        cnt2step=0;
  f4:	10 92 64 00 	sts	0x0064, r1
        TIMSK=(1<<OCIE2); // compare match on OCR2
  f8:	80 e8       	ldi	r24, 0x80	; 128
  fa:	89 bf       	out	0x39, r24	; 57
        TCNT2=0;  // init counter
  fc:	14 bc       	out	0x24, r1	; 36
        OCR2=250;//195; // value to compare against 3906Hz/195=20Hz
  fe:	8a ef       	ldi	r24, 0xFA	; 250
 100:	83 bd       	out	0x23, r24	; 35
        //TCCR2=(1<<WGM21);
        // divide clock by 256: 1MHz/256=3906.25Hz
        // clock divider, start counter (or with WGM21 setting):
//        TCCR2|=(1<<CS02)|(1<<CS01)|(0<<CS00);

		TCCR2|=(1<<CS02)|(1<<CS01)|(1<<CS00); //1024
 102:	85 b5       	in	r24, 0x25	; 37
 104:	87 60       	ori	r24, 0x07	; 7
 106:	85 bd       	out	0x25, r24	; 37
        //LED_INIT;
        //LEDOFF;
		
		PORTC=0;
        init_cnt2();
        sei();
 108:	78 94       	sei
 10a:	ff cf       	rjmp	.-2      	; 0x10a <main+0x18>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
